### Set global variables

SEED = 2718

TOOLNAMES = [
    "leeHom", "AdapterRemoval", "ClipAndMerge", "seqtk_adna_trim", 
    "bbmerge", "fastp", "SeqPrep"
    ]

# project directory
PROJECTDIR = "/net/node07/home/projects/DNA_reconstruct/per-base_merging_behavior"

IN_1 = PROJECTDIR + "/input/qscores_s1.fq.gz"
IN_2 = PROJECTDIR + "/input/qscores_s2.fq.gz"

# output directories
OUTDIR = PROJECTDIR + "/output"
OUTDIR_BEN = OUTDIR + "/benchmarks"
OUTDIR_SIM = OUTDIR + "/simulations"
OUTDIR_REC = OUTDIR + "/reconstructions"
OUTDIR_EVA = OUTDIR + "/evaluation"
OUTDIR_PLOT = OUTDIR + "/plots"

# tool paths
LEEHOM = "/home/projects/gabriel/leehom_interweaved/leeHom" 
ADPTREM = "/home/ctools/adapterremoval-2.3.2/build/AdapterRemoval"
CLIPMERGE = "/home/ctools/ClipAndMerge-1.7.8/build/libs/ClipAndMerge-1.7.8.jar"
SEQTK = "/home/ctools/seqtk-1.3/seqtk"
ADNA = "/home/ctools/adna/adna-trim"
BBMERGE = "/home/ctools/bbmap_38_91/bbmerge.sh"
FASTP = "/home/ctools/fastp/fastp"
SEQPREP = "/home/ctools/SeqPrep-1.3.2/SeqPrep"

# python scripts
EVAL_SCRIPT = PROJECTDIR + "/evaluate.py"
PLOT_SCRIPT = PROJECTDIR + "/plot.py"

# adapter sequences
ADPT1 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCACCGATTCGATCTCGTATGCCGTCTTCTGCTTG"
ADPT2 = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATTT"


### Run all


rule all:
    input:
        OUTDIR_PLOT + "/final/match_1.png",
        OUTDIR_PLOT + "/final/match_2.png",
        OUTDIR_PLOT + "/final/mismatch_1.png",
        OUTDIR_PLOT + "/final/mismatch_2.png",


### Reconstruction


rule leeHom:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/leeHom/qscores_merged.fq.gz",
    params:
        out_prefix=OUTDIR_REC + "/leeHom/qscores_merged",
        rm1=OUTDIR_REC + "/leeHom/qscores_merged_r1.fq.gz", 
        rm2=OUTDIR_REC + "/leeHom/qscores_merged_r2.fq.gz",
        rm3=OUTDIR_REC + "/leeHom/qscores_merged.fail.fq.gz",
        rm4=OUTDIR_REC + "/leeHom/qscores_merged_r1.fail.fq.gz",
        rm5=OUTDIR_REC + "/leeHom/qscores_merged_r2.fail.fq.gz",
    benchmark:
        OUTDIR_BEN + "/leeHom/qscores_merged.tsv"
    run:
        # LeeHom outputs quality scores >41
        shell(
            "{LEEHOM}"
            " --ancientdna"
            " --adapterFirstRead {ADPT1}"
            " --adapterSecondRead {ADPT2}"
            " -fq1 {input.s1}"
            " -fq2 {input.s2}"
            " -fqo {params.out_prefix}"
        )
        shell(
            "rm"
            " {params.rm1}"
            " {params.rm2}"
            " {params.rm3}"
            " {params.rm4}"
            " {params.rm5}"
        )


rule AdapterRemoval:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/AdapterRemoval/qscores_merged.fq",
    params:
        out_collapsed=OUTDIR_REC + "/AdapterRemoval/qscores_merged.fq",
        out_prefix=OUTDIR_REC + "/AdapterRemoval/qscores_merged",
        rm1=OUTDIR_REC + "/AdapterRemoval/qscores_merged.pair1.truncated",
        rm2=OUTDIR_REC + "/AdapterRemoval/qscores_merged.pair2.truncated",
        rm3=OUTDIR_REC + "/AdapterRemoval/qscores_merged.singleton.truncated",
        rm4=OUTDIR_REC + "/AdapterRemoval/qscores_merged.discarded",
        rm5=OUTDIR_REC + "/AdapterRemoval/qscores_merged.collapsed.truncated",
        rm6=OUTDIR_REC + "/AdapterRemoval/qscores_merged.settings",
    benchmark:
        OUTDIR_BEN + "/AdapterRemoval/qscores_merged.tsv"
    run:
        shell(
            "{ADPTREM}"
            " --collapse"
            " --minlength 1"
            " --adapter1 {ADPT1}"
            " --adapter2 {ADPT2}"
            " --file1 {input.s1}"
            " --file2 {input.s2}"
            " --basename {params.out_prefix}"
            " --outputcollapsed {params.out_collapsed}"
            " --seed {SEED}"
            " --minalignmentlength 10"
            " --qualitymax 93"
        )
        shell(
            "rm"
            " {params.rm1}"
            " {params.rm2}"
            " {params.rm3}"
            " {params.rm4}"
            " {params.rm5}"
            " {params.rm6}"
        )


rule ClipAndMerge:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/ClipAndMerge/qscores_merged.fq"
    benchmark:
        OUTDIR_BEN + "/ClipAndMerge/qscores_merged.tsv"
    shell:
        (
            "java -jar {CLIPMERGE}"
            " -in1 {input.s1}"
            " -in2 {input.s2}"
            " -f {ADPT1}"
            " -r {ADPT2}"
            " -o {output}"
            " -l 1"
            " -u /dev/null /dev/null"
        )


rule seqtk_adna_trim:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/seqtk_adna_trim/qscores_merged.fq",
    benchmark:
        OUTDIR_BEN + "/seqtk_adna_trim/qscores_merged.tsv"
    shell:
        (
            "{SEQTK} mergepe"
            " {input.s1}"
            " {input.s2} |"
            " {ADNA}"
            " -l 1"
            " -t 1"
            " -"
            " > {output}"
        )


rule bbmerge:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        m=OUTDIR_REC + "/bbmerge/qscores_merged.fq",
        u1=OUTDIR_REC + "/bbmerge/qscores_unmerged_s1.fq",
        u2=OUTDIR_REC + "/bbmerge/qscores_unmerged_s2.fq",
    benchmark:
        OUTDIR_BEN + "/bbmerge/qscores_merged.tsv"
    shell:
        # The parameter efilter and ratiomargin were set to their minimum to 
        # allow mismatch merging. This is done. because bbmerge uses quite a 
        # few filters to reject aligments that includes the quality scores, 
        # and error ratios. For details on the merging process of bbmerge
        # look here: https://journals.plos.org/plosone/article/file?id=10.1371
        #
        # t               number of threads
        # mininsert=35    Minimum insert size to merge reads.
        # mininsert0=35   Insert sizes less than this will not be considered.
        #                 Must be less than or equal to mininsert.
        # minoverlap=12   Minimum number of overlapping bases to allow merging.
        # efilter=6       Ban overlaps with over this many times the expected 
        #                 number of errors.  Lower is more strict. -1 disables.
        # ratiomargin=5.5 Lower increases merge rate; min is 1.
        (
            "{BBMERGE}"
            " in1={input.s1}"
            " in2={input.s2}"
            " out={output.m}"
            " outu1={output.u1}"
            " outu2={output.u2}"
            " adapter1={ADPT1}"
            " adapter2={ADPT2}"
            " t=1"
            " mininsert=1"
            " mininsert0=1"
            " minoverlap=10"
            " minoverlap=1"
            " efilter=-1"
            " ratiomargin=1"
        )


rule fastp:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/fastp/qscores_merged.fq",
    benchmark:
        OUTDIR_BEN + "/fastp/qscores_merged.tsv"
    shell:
        (
            "{FASTP}"
            " --merge "
            " --in1 {input.s1}"
            " --in2 {input.s2}"
            " --adapter_sequence {ADPT1}"
            " --adapter_sequence_r2 {ADPT2}"
            " --merged_out {output}"
            " --overlap_len_require 10"
            " --disable_length_filtering"
            " --json /dev/null"
            " --html /dev/null"
        )


rule SeqPrep:
    input:
        s1=IN_1,
        s2=IN_2
    output:
        OUTDIR_REC + "/SeqPrep/qscores_merged.fq.gz",
    benchmark:
        OUTDIR_BEN + "/SeqPrep/qscores_merged.tsv"
    shell:
        (
            "{SEQPREP}"
            " -f {input.s1}"
            " -r {input.s2}"
            " -s {output}"
            " -o 10"
            " -1 /dev/null"
            " -2 /dev/null"
            " -L 1"
            " -A {ADPT1}"
            " -B {ADPT2}"
        )


### Evaluation 


rule evaluate_zipped:
    "Run the evaluation script"
    input:
        OUTDIR_REC + "/{tool_name}/qscores_merged.fq.gz",
    output:
        OUTDIR_EVA + "/{tool_name}_qs.csv"
    wildcard_constraints:
        tool_name="(leeHom|SeqPrep)",
    conda:
        PROJECTDIR + "/environment.yaml"
    run:
        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input}"
            " -o {output}"
            " -t {wildcards.tool_name}"
        )


rule evaluate_unzipped:
    "Run the evaluation script for unzipped fasta files and then zip them"
    input:
        OUTDIR_REC + "/{tool_name}/qscores_merged.fq",
    output:
        OUTDIR_EVA + "/{tool_name}_qs.csv",
    wildcard_constraints:
        tool_name="(AdapterRemoval|ClipAndMerge|seqtk_adna_trim|bbmerge|fastp)"
    conda:
        PROJECTDIR + "/environment.yaml"
    run:
        shell(
            "python3 {EVAL_SCRIPT}"
            " -s1 {IN_1}"
            " -s2 {IN_2}"
            " -m {input}"
            " -o {output}"
            " -t {wildcards.tool_name}"
        )
        shell("gzip {OUTDIR_REC}/{wildcards.tool_name}/*")


rule merge_csv:
    input:
        expand(
            OUTDIR_EVA + "/{tool_name}_qs.csv",
            tool_name=TOOLNAMES,
        ),
    output:  
        OUTDIR_EVA + "/all_qs.csv",
    shell:
        (
            "awk 'NR==1; FNR==1{{next}} 1' {OUTDIR_EVA}/*qs.csv"
            " > {OUTDIR_EVA}/all_qs.csv"
        )


rule plot:
    input:
        OUTDIR_EVA + "/all_qs.csv"
    output:
        expand(
            OUTDIR_PLOT + "/combined/{tool_name}.png",
            tool_name=TOOLNAMES,
        ),
        expand(
            OUTDIR_PLOT + "/{tool_name}_match.png",
            tool_name=TOOLNAMES,
        ),
        expand(
            OUTDIR_PLOT + "/{tool_name}_mismatch.png",
            tool_name=TOOLNAMES,
        ),
    conda:
        PROJECTDIR + "/environment.yaml"
    shell:
        (
            "python3 {PLOT_SCRIPT}"
            " -i {input}"
            " -o {OUTDIR_PLOT}"
        )

rule create_final_plots:
    input:
        PROJECTDIR + "/create_final_plots.sh",
        expand(
            OUTDIR_PLOT + "/{tool_name}_match.png",
            tool_name=TOOLNAMES,
        ),
        expand(
            OUTDIR_PLOT + "/{tool_name}_mismatch.png",
            tool_name=TOOLNAMES,
        ),
    output:
        OUTDIR_PLOT + "/final/match_1.png",
        OUTDIR_PLOT + "/final/match_2.png",
        OUTDIR_PLOT + "/final/mismatch_1.png",
        OUTDIR_PLOT + "/final/mismatch_2.png",
    shell:
        ("bash create_final_plots.sh")
